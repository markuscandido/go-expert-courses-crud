package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"

	dto_graphql "github.com/markuscandido/go-expert-courses-crud/internal/application/adapter/graphql/dto"
	"github.com/markuscandido/go-expert-courses-crud/internal/application/adapter/graphql/model"
	"github.com/markuscandido/go-expert-courses-crud/internal/application/core/domain/dto"
)

// Courses is the resolver for the courses field.
func (r *categoryResolver) Courses(ctx context.Context, obj *dto_graphql.CategoryResponse) ([]*dto_graphql.CourseResponse, error) {
	if obj == nil {
		return nil, nil
	}

	coursesDTO, err := r.Queries.ListCoursesByCategoryId.Execute(ctx, obj.ID)
	if err != nil {
		return nil, err
	}

	var courses []*dto_graphql.CourseResponse
	for _, courseDTO := range coursesDTO {
		course := &dto_graphql.CourseResponse{
			ID:          courseDTO.ID,
			Name:        courseDTO.Name,
			Description: courseDTO.Description,
			CategoryID:  courseDTO.CategoryID,
			IsActive:    courseDTO.IsActive,
			CreatedAt:   courseDTO.CreatedAt,
			UpdatedAt:   courseDTO.UpdatedAt,
		}
		courses = append(courses, course)
	}
	return courses, nil
}

// Category is the resolver for the category field.
func (r *courseResolver) Category(ctx context.Context, obj *dto_graphql.CourseResponse) (*dto_graphql.CategoryResponse, error) {
	if obj == nil {
		return nil, nil
	}

	categoryDTO, err := r.Queries.GetCategoryByCourseId.Execute(ctx, obj.ID)
	if err != nil {
		return nil, err
	}
	return &dto_graphql.CategoryResponse{
		ID:          categoryDTO.ID,
		Name:        categoryDTO.Name,
		Description: categoryDTO.Description,
		IsActive:    categoryDTO.IsActive,
		CreatedAt:   categoryDTO.CreatedAt,
		UpdatedAt:   categoryDTO.UpdatedAt,
	}, nil
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*dto_graphql.CategoryResponse, error) {
	categoryDTO, err := r.Mutations.CreateCategoryUseCase.Execute(ctx, dto.CreateCategoryInputDTO{
		Name:        input.Name,
		Description: input.Description,
	})
	if err != nil {
		return nil, err
	}

	return &dto_graphql.CategoryResponse{
		ID:          categoryDTO.ID,
		Name:        categoryDTO.Name,
		Description: categoryDTO.Description,
		IsActive:    categoryDTO.IsActive,
		CreatedAt:   categoryDTO.CreatedAt,
		UpdatedAt:   categoryDTO.UpdatedAt,
	}, nil
}

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.NewCourse) (*dto_graphql.CourseResponse, error) {
	courseDTO, err := r.Mutations.CreateCourseUseCase.Execute(ctx, dto.CreateCourseInputDTO{
		Name:        input.Name,
		Description: input.Description,
		CategoryID:  input.CategoryID,
	})
	if err != nil {
		return nil, err
	}

	return &dto_graphql.CourseResponse{
		ID:          courseDTO.ID,
		Name:        courseDTO.Name,
		Description: courseDTO.Description,
		CategoryID:  courseDTO.CategoryID,
		IsActive:    courseDTO.IsActive,
		CreatedAt:   courseDTO.CreatedAt,
		UpdatedAt:   courseDTO.UpdatedAt,
	}, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*dto_graphql.CategoryResponse, error) {
	limit := 100
	offset := 0

	result, err := r.Queries.ListCategoriesUseCase.Execute(ctx, limit, offset)
	if err != nil {
		return nil, err
	}

	responses := make([]*dto_graphql.CategoryResponse, 0, len(result.Items))
	for _, categoryDTO := range result.Items {
		responses = append(responses, &dto_graphql.CategoryResponse{
			ID:          categoryDTO.ID,
			Name:        categoryDTO.Name,
			Description: categoryDTO.Description,
			IsActive:    categoryDTO.IsActive,
			CreatedAt:   categoryDTO.CreatedAt,
			UpdatedAt:   categoryDTO.UpdatedAt,
		})
	}

	return responses, nil
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*dto_graphql.CourseResponse, error) {
	limit := 100
	offset := 0

	courseDTOs, err := r.Queries.ListCoursesUseCase.Execute(ctx, limit, offset)
	if err != nil {
		return nil, err
	}

	responses := make([]*dto_graphql.CourseResponse, 0, len(courseDTOs))
	for _, courseDTO := range courseDTOs {
		responses = append(responses, &dto_graphql.CourseResponse{
			ID:          courseDTO.ID,
			Name:        courseDTO.Name,
			Description: courseDTO.Description,
			CategoryID:  courseDTO.CategoryID,
			IsActive:    courseDTO.IsActive,
			CreatedAt:   courseDTO.CreatedAt,
			UpdatedAt:   courseDTO.UpdatedAt,
		})
	}

	return responses, nil
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Course returns CourseResolver implementation.
func (r *Resolver) Course() CourseResolver { return &courseResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type categoryResolver struct{ *Resolver }
type courseResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
